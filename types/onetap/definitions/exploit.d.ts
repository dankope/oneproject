/**
 * Allows scripts to alter the cheats internal functioning of tick based exploits.
 * @see {@link https://www.onetap.com/scripting/categories/18/ | Official Onetap Documentation}
 */
declare namespace Exploit {
    /**
     * @returns a fraction representing how much of the exploit is charged. '0' means it's completely uncharged and '1' means it's fully charged.
     * @see {@link https://www.onetap.com/resources/152/ | Official Onetap Documentation}
     */
    function GetCharge(): number;

    /**
     * Forces the cheat to recharge.
     * @see {@link https://www.onetap.com/resources/153/ | Official Onetap Documentation}
     */
    function Recharge(): void;

    /**
     * Enables the cheat's automatic recharging.
     * @see {@link https://www.onetap.com/resources/155/ | Official Onetap Documentation}
     */
    function EnableRecharge(): void;

    /**
     * Disables the cheat's automatic recharging.
     * @see {@link https://www.onetap.com/resources/154/ | Official Onetap Documentation}
     */
    function DisableRecharge(): void;

    /**
     * Overrides the exploit's shift amount.
     * @param amount The new amount. The maximum recommended amount is 15.
     * @see {@link https://www.onetap.com/resources/177/ | Official Onetap Documentation}
     */
    function OverrideShift(amount: number): void;

    /**
     * Overrides the exploit's tolerance amount.
     * @param amount The new amount. The minimum amount is 1.
     * @see {@link https://www.onetap.com/resources/178/ | Official Onetap Documentation}
     */
    function OverrideTolerance(amount: number): void;
}

export default interface IExploit {
    GetCharge: typeof Exploit.GetCharge;
    Recharge: typeof Exploit.Recharge;
    EnableRecharge: typeof Exploit.EnableRecharge;
    DisableRecharge: typeof Exploit.DisableRecharge;
    OverrideShift: typeof Exploit.OverrideShift;
    OverrideTolerance: typeof Exploit.OverrideTolerance;
}